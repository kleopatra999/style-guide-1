// Wikia Style Guide
// http://wikia.github.io/style-guide/
// Originally based on a fork Zurb Foundation 5 (http://foundation.zurb.com/)
// Licensed under MIT Open Source

@import "../settings";

// Global Foundation Mixins
//

// @mixins
//
// We use this to control border radius.
// $radius - Default: $global-radius || 4px
@mixin radius($radius:$global-radius) {
  @if $radius {
    border-radius: $radius;
  }
}

// @mixins
//
// We use this to create equal side border radius on elements.
// $side - Options: left, right, top, bottom
@mixin side-radius($side, $radius:$global-radius) {
  @if ($side == left or $side == right) {
    -webkit-border-bottom-#{$side}-radius: $radius;
    -webkit-border-top-#{$side}-radius: $radius;
    border-bottom-#{$side}-radius: $radius;
    border-top-#{$side}-radius: $radius;
  } @else {
    -webkit-#{$side}-left-radius: $radius;
    -webkit-#{$side}-right-radius: $radius;
    border-#{$side}-left-radius: $radius;
    border-#{$side}-right-radius: $radius;
  }
}

// @mixins
//
// We can control whether or not we have inset shadows edges.
// $active - Default: true, Options: false
@mixin inset-shadow($active:true) {
  box-shadow: $shiny-edge-size $shiny-edge-color inset;

  @if $active { &:active {
    box-shadow: $shiny-edge-size $shiny-edge-active-color inset; } }
}

// @mixins
//
// We use this to add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
@mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
  transition: $property $speed $ease;
}

// @mixins
//
// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
  -webkit-box-sizing: $type; // Android < 2.3, iOS < 4
     -moz-box-sizing: $type; // Firefox < 29
          box-sizing: $type; // Chrome, IE 8+, Opera, Safari 5.1
}

// @mixins
//
// We use this to create isosceles triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

// @mixins
//
// We use this to create the icon with three lines aka the hamburger icon, the menu-icon or the navicon
// $width - Width of hamburger icon in rem
// $left - If false, icon will be centered horizontally || explicitly set value in rem
// $top - If false, icon will be centered vertically || explicitly set value in rem
// $thickness - thickness of lines in hamburger icon, set value in px
// $gap - spacing between the lines in hamburger icon, set value in px
// $color - icon color
// $hover-color - icon color during hover
// $offcanvas - Set to true of @include in offcanvas
@mixin hamburger($width, $left, $top, $thickness, $gap, $color, $hover-color, $offcanvas) {
  span::after {
    content: "";
    position: absolute;
    display: block;
    height: 0;

    @if $offcanvas {
      @if $top {
        top: $top;
      }
      @else {
        top: 50%;
        margin-top: -$width/2;
      }
      @if $left {
        left: $left;
      }
      @else {
        left: ($tabbar-menu-icon-width - $width)/2;
      }
    }
    @else {
      top: 50%;
      margin-top: -($width/2);
      #{$opposite-direction}: $topbar-link-padding;
    }

    box-shadow:
      0 0px 0 $thickness $color,
      0 $gap + $thickness 0 $thickness $color,
      0 (2 * $gap + 2*$thickness) 0 $thickness $color;
    width: $width;
  }
  span:hover:after {
    box-shadow:
      0 0px 0 $thickness $hover-color,
      0 $gap + $thickness 0 $thickness $hover-color,
      0 (2 * $gap + 2*$thickness) 0 $thickness $hover-color;
  }
}

// We use this to do clear floats
@mixin clearfix {
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

// @mixins
//
// We use this to add a glowing effect to block elements
// $selector - Used for selector state. Default: focus, Options: hover, active, visited
// $fade-time - Default: 300ms
// $glowing-effect-color - Default: fade-out($primary-color, .25)
@mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($primary-color, .25)) {
  transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

  &:#{$selector} {
    box-shadow: 0 0 5px $glowing-effect-color;
    border-color: $glowing-effect-color;
  }
}

// @mixins
//
// We use this to translate elements in 2D
// $horizontal: Default: 0
// $vertical: Default: 0
@mixin translate2d($horizontal:0, $vertical:0) {
  transform: translate($horizontal,$vertical)
}

// @mixins
//
// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// @mixins
//
// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  height: auto;
  width: auto;
  overflow: visible;
  clip: auto;
}

// @mixins
@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

// @mixins
@mixin width-calc($expression) {
  @include calc(width, #{$expression});
}

// @mixins
@mixin height-calc($expression) {
  @include calc(height, #{$expression});
}

// @mixins
// makes a chevron
@mixin left-chevron($height: 10px, $thickness: 2px, $direction: 'left', $color: #000) {
  &::before {
    border-color: $color;
    border-style: solid;
    border-width: $thickness $thickness 0 0;
    content: '';
    display: inline-block;
    height: round($height / 2);
    left: 0;
    position: relative;
    top: -1px;
    vertical-align: middle;
    width: round($height / 2);

    @if ($direction == 'down') {
      -webkit-transform: rotate(135deg);
      transform: rotate(135deg);
    } @else if ($direction == 'left') {
      -webkit-transform: rotate(-135deg);
      transform: rotate(-135deg);
    } @else if ($direction == 'right') {
      -webkit-transform: rotate(45deg);
      transform: rotate(45deg);
    } @else if ($direction == 'up') {
      -webkit-transform: rotate(-45deg);
      transform: rotate(-45deg);
    }
  }
}
@mixin right-chevron($height: 10px, $thickness: 2px, $direction: 'right', $color: #000) {
  &::after {
    border-color: $color;
    border-style: solid;
    border-width: $thickness $thickness 0 0;
    content: '';
    display: inline-block;
    height: round($height / 2);
    right: 0;
    position: relative;
    top: -1px;
    vertical-align: middle;
    width: round($height / 2);

    @if ($direction == 'down') {
      -webkit-transform: rotate(135deg);
      transform: rotate(135deg);
    } @else if ($direction == 'left') {
      -webkit-transform: rotate(-135deg);
      transform: rotate(-135deg);
    } @else if ($direction == 'right') {
      -webkit-transform: rotate(45deg);
      transform: rotate(45deg);
    } @else if ($direction == 'up') {
      -webkit-transform: rotate(-45deg);
      transform: rotate(-45deg);
    }
  }
}

// @mixins
@mixin column-count( $count ) {
  -webkit-column-count: $count;
  -moz-column-count: $count;
  column-count: $count;
}

@mixin column-rule( $rule ) {
  -webkit-column-rule: $rule;
  -moz-column-rule: $rule;
  column-rule: $rule;
}

@mixin column-gap( $gap ) {
  -webkit-column-gap: $gap;
  -moz-column-gap: $gap;
  column-gap: $gap;
}

@mixin column-break-inside( $value ) {
  -webkit-column-break-inside: $value;
  -moz-column-break-inside: $value;
  -o-column-break-inside: $value;
  -ms-column-break-inside: $value;
  column-break-inside: $value;
}

@mixin column-span( $value ) {
  -webkit-column-span: $value;
  column-span: $value;
}

@mixin global-nav-chevron {
  border: 4px solid transparent;
  border-top-color: $global-navigation-text-color;
  content: ' ';
  display: inline-block;
}

@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}
}

@mixin linear-gradient($solidFill, $start: top, $color1: false, $color1pos: false, $color2: false, $color2pos: false, $color3: false, $color3pos: false, $color4: false, $color4pos: false) {

  // output solid fill for browsers not supporting CSS gradients
  @if $solidFill {
    background-color: $solidFill;
  }

  $mozBackground : "";
  $webkitBackground : "";

  // add gradient start type
  @if $start == top {
    $webkitBackground : "0% 0%, 0% 100%";
  } @else if $start == left {
    $webkitBackground : "0% 0%, 100% 0%";
  } @else if $start == right {
    $webkitBackground : "100% 0%, 0% 0%";
  }
  $mozBackground : $start;

  // add colors and their positions
  @if $color1 {
    $mozBackground : $mozBackground + ", " + $color1 + " " + $color1pos;
    $webkitBackground : $webkitBackground + ", color-stop(" + $color1pos + ", " + $color1 + ")";
  }
  @if $color2 {
    $mozBackground : $mozBackground + ", " + $color2 + " " + $color2pos;
    $webkitBackground : $webkitBackground + ", color-stop(" + $color2pos + ", " + $color2 + ")";
  }
  @if $color3 {
    $mozBackground : $mozBackground + ", " + $color3 + " " + $color3pos;
    $webkitBackground : $webkitBackground + ", color-stop(" + $color3pos + ", " + $color3 + ")";
  }
  @if $color4 {
    $mozBackground : $mozBackground + ", " + $color4 + " " + $color4pos;
    $webkitBackground : $webkitBackground + ", color-stop(" + $color4pos + ", " + $color4 + ")";
  }

  /* dev note(hyun): gecko, ms, and opera uses the html5 syntax.  None support non-vendor specific key currently (2012-3-19). */
  background-image: unquote("-moz-linear-gradient(" + unquote($mozBackground) + ")");
  background-image: unquote("-webkit-gradient(linear, " + unquote($webkitBackground) + ")");
  background-image: unquote("-o-linear-gradient(" + unquote($mozBackground) + ")");
  background-image: unquote("-ms-linear-gradient(" + unquote($mozBackground) + ")");
  /* background-image: unquote("linear-gradient(" + unquote($mozBackground) + ")"); */	/* uncomment this someday - hyun */
}

@mixin clear-linear-gradient($background-color: transparent) {
  background-image: none;
  background-color: $background-color;
}

@mixin radial-gradient($color1: false, $color2: false) {
  background-image: $color1; /* Old browsers */
  background-image: -moz-radial-gradient(center, ellipse cover, $color1 0%, $color2 100%); /* FF3.6+ */
  background-image: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$color1), color-stop(100%,$color2)); /* Chrome,Safari4+ */
  background-image: -webkit-radial-gradient(center, ellipse cover, $color1 0%,$color2 100%); /* Chrome10+,Safari5.1+ */
  background-image: -o-radial-gradient(center, ellipse cover, $color1 0%,$color2 100%); /* Opera 12+ */
  background-image: -ms-radial-gradient(center, ellipse cover, $color1 0%,$color2 100%); /* IE10+ */
  background-image: radial-gradient(ellipse at center, $color1 0%,$color2 100%); /* W3C */
}

@include exports("global") {

  // Meta styles are included in all builds, as they are a dependancy of the Javascript.
  // Used to provide media query values for javascript components.
  // Forward slash placed around everything to convince PhantomJS to read the value.

  meta.foundation-version {
    font-family: "/5.4.7/";
  }

  meta.foundation-mq-small {
    font-family: "/" + unquote($small-up) + "/";
    width: lower-bound($small-range);
  }

  meta.foundation-mq-medium {
    font-family: "/" + unquote($medium-up) + "/";
    width: lower-bound($medium-range);
  }

  meta.foundation-mq-large {
    font-family: "/" + unquote($large-up) + "/";
    width: lower-bound($large-range);
  }

  meta.foundation-mq-xlarge {
    font-family: "/" + unquote($xlarge-up) + "/";
    width: lower-bound($xlarge-range);
  }

  meta.foundation-mq-xxlarge {
    font-family: "/" + unquote($xxlarge-up) + "/";
    width: lower-bound($xxlarge-range);
  }

  meta.foundation-data-attribute-namespace {
    font-family: #{$namespace};
  }

  @if $include-html-global-classes {

    // Must be 100% for off canvas to work
    html, body { height: 100%; }

    // Set box-sizing globally to handle padding and border widths
    *,
    *:before,
    *:after {
      @include box-sizing(border-box);
    }

    // Default body styles
    body {
      background: $body-background;
      color: $body-font-color;
      padding: 0;
      margin: 0;
      font-family: $body-font-family;
      font-weight: $body-font-weight;
      font-style: $body-font-style;
      line-height: $base-line-height; // Set to $base-line-height to take on browser default of 150%
      position: relative;
      cursor: $cursor-auto-value;
    }

  a:hover { cursor: $cursor-pointer-value; }

    // Grid Defaults to get images and embeds to work properly
    img { max-width: 100%; height: auto; }

    img { -ms-interpolation-mode: bicubic; }

    #map_canvas,
    .map_canvas {
      img,
      embed,
      object { max-width: none !important;
      }
    }

    // Miscellaneous useful HTML classes
    .left { float: left !important; }
    .right { float: right !important; }
    .clearfix { @include clearfix; }

    // Hide visually and from screen readers
    .hide {
      display: none !important;
      visibility: hidden;
    }

    // Hide visually and from screen readers, but maintain layout
    .invisible { visibility: hidden; }

    // Font smoothing
    // Antialiased font smoothing works best for light text on a dark background.
    // Apply to single elements instead of globally to body.
    // Note this only applies to webkit-based desktop browsers and Firefox 25 (and later) on the Mac.
    .antialiased { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }

    // Get rid of gap under images by making them display: inline-block; by default
    img {
      display: inline-block;
      vertical-align: middle;
    }

    //
    // Global resets for forms
    //

    // Make sure textarea takes on height automatically
    textarea { height: auto; min-height: 50px; }

    // Make select elements 100% width by default
    select { width: 100%; }
  }
}
